---
title: "Version control with git"
date: "`r Sys.Date()`"
format: "kakashi-revealjs"
---

```{r}
#| label: setup
#| include: false
options(
  tibble.max_extra_cols = 6, 
  tibble.width = 60
)
```

# *working over space and time* {background-color="#23373B"}

## {.center .middle}

:::{style="box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;"}
```{r}
#| out.height: 100%
#| out.width: 100%
#| echo: false
knitr::include_graphics("img/git_anchor.png")
```
:::

Art by Allison Horst

## {.center .middle}

:::{style="box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;"}
```{r}
#| out.height: 100%
#| out.width: 100%
#| echo: false
knitr::include_graphics("img/version_control.png")
```
:::

Art by Allison Horst

## {.center .middle}

:::{style="box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;"}
```{r}
#| out.height: 100%
#| out.width: 100%
#| echo: false
knitr::include_graphics("img/git_collab.png")
```
:::

Art by Allison Horst

## What is a git repository?

*An initialized repository contains snapshots of your project (a folder on your computer) over time*

. . .

`git init`

. . .

`.git/`

## *Your Turn 1*

### Create a git repository, either though the command line or through your favorite IDE.

### At the command line, you can create a new directory to become a repository or turn an existing directory into a repository.

## Making changes: the staging area

You need to tell git *about* new files and new changes

. . .

`git add file_name` or `git add .` (add everything) *stages* changes

. . .

The staging area is place to *prepare* commits and other git actions

## Making changes: `git status`

```{bash}
#| eval: false
#| code-line-numbers: "|1|2|3,6|8,10"
git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   ...

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        ...

no changes added to commit (use "git add" and/or "git commit -a")
```

## Making changes: `git commit`

. . .

A commit is a snapshot of your project in time

. . .

`git commit -m "a summary of the changes"` 


## Logging changes: `git log`

```{bash}
#| eval: false
#| code-line-numbers: "|1|2|6"
git log
commit 4a82e4261c8da4fc83656c20ac75adcfa04e1076 (HEAD -> main)
Author: Malcolm Barrett <malcolmbarrett@gmail.com>
Date:   Sat Feb 24 12:45:42 2024 -0500

    a summary of the changes
```

. . .

A commit is a both a noun and a verb

## *Your Turn 2*

### Create and save a new Quarto document in your git repository
### Check `git status`
### Add the file to the staging area then check `git status` again
### Commit the file, then check `git log`

## Making more changes: diffs

```{bash}
#| eval: false
#| code-line-numbers: "|1|6-15|10|11"
git diff 
diff --git a/report.qmd b/report.qmd
index 3d85f46..0be67e9 100644
--- a/report.qmd
+++ b/report.qmd
@@ -15,7 +15,7 @@ When you click the **Render** button a document will be generated that includes
 You can embed code like this:
 
...
-1 + 1
+import from polars pl
...
```

## {.center .middle}
 
```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base'}}%%
gitGraph
   commit id: "initial commit"
```

## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base'}}%%
gitGraph
   commit id: "initial commit"
   commit id: "add file"
```

## *Your Turn 3*

### Modify the Quarto document by adding a new code chunk
### Check `git diff`
### Stage and commit the file
### Take a look at the log

## {.center .middle}

:::{style="box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;"}
```{r}
#| out.height: 100%
#| out.width: 100%
#| echo: false
knitr::include_graphics("img/git-warehouse.png")
```
:::

Art by Allison Horst

## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit
```


## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit
   branch table1
   checkout table1
```

## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit
   branch table1
   checkout table1
   commit
```

## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit
   branch table1
   checkout table1
   commit
   commit
```

## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit
   branch table1
   checkout table1
   commit
   commit
   commit
```

## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': false,'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit tag:"both"
```

## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': false,'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit tag:"main"
   commit tag:"table1"
```

## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showBranches': false,'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit tag:"main"
   commit
   commit tag:"table1"
```

## Branches

. . .

Branches are names that point to a specific commit

. . .

`git branch branch_name` creates `branch_name`. `git branch` alone lists branches.

. . .

To switch, use `git switch branch_name` (or `git checkout branch_name`)

## Your Turn 4

### Create a new branch called `notebook`
### Switch to the new branch
### Add a new Quarto file called `notebook.qmd`
### Stage and commit the new document
### Check `git branch` and `git log`

## `head` to `HEAD`

. . .

All branches have a `head`, the commit to which a branch points

. . .

`HEAD` is the *commit* that is **currently checked out** in your working directory

. . .

Usually, `HEAD` is the `head` of a branch


## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit tag:"main"
   branch table1
   checkout table1
   commit
   commit
   commit tag:"HEAD"
```

## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit
   branch table1
   checkout table1
   commit
   commit
   commit tag:"table1"
   checkout main
   merge table1 tag:"HEAD"
```

## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit
   branch table1
   checkout table1
   commit
   commit
   commit tag:"table1"
   checkout main
   merge table1
   commit tag:"HEAD"
```

## Merging branches

. . .

Merge branches *in* to the one you're on: switch back to main, then merge the branch with your new work

. . .

`git switch main` -> `git merge table1`

. . . 

Clean up merged or discarded branches with `git branch -d branch_name`

## *Your Turn 4*

### Switch back to the original branch
### Merge in the changes from the `notebook` branch
### Delete the `notebook` branch


## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit
   branch table1
   checkout table1
   commit
   commit
   commit
   checkout main
   branch intro
   checkout intro
   commit
   commit
   commit
   checkout main
   merge intro
   checkout table1
   commit
   commit
```

## {.center .middle}

:::{style="box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;"}
```{r}
#| out.height: 100%
#| out.width: 100%
#| echo: false
knitr::include_graphics("img/git-hug.png")
```
:::

Art by Allison Horst


## Merge conflicts

```{bash}
#| eval: false
#| code-line-numbers: "|3|4"
git merge table1
Auto-merging report.qmd
CONFLICT (content): Merge conflict in report.qmd
Automatic merge failed; fix conflicts and then commit the result.
```

## Merge conflicts

```{bash}
#| eval: false
#| code-line-numbers: "|3-4|10"
git status
On branch main
You have unmerged paths.
(fix conflicts and run "git commit")
(use "git merge --abort" to abort the merge)

Unmerged paths:
(use "git add <file>..." to mark resolution)

both modified:   report.qmd
```


## Merge conflicts

```{bash}
#| eval: false
#| code-line-numbers: "|1,3,5|1-2|4-5"
<<<<<<< HEAD
This is something someone else wrote 
=======
This is something you wrote
>>>>>>> table1
```

## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit
   branch table1
   checkout table1
   commit
   commit
   commit
   checkout main
   commit
   commit
   commit
```

## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit
   branch table1
   checkout table1
   commit
   commit
   commit
   checkout main
   commit
   commit
   commit
   checkout table1
   merge main
```

## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit
   branch table1
   checkout table1
   commit
   commit
   commit
   checkout main
   commit
   commit
   commit
   checkout table1
   merge main
   commit
   commit
   commit
```

## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit
   branch table1
   checkout table1
   commit
   commit
   commit
   checkout main
   commit
   commit
   commit
   checkout table1
   merge main
   commit
   commit
   commit
   checkout main
   merge table1
```

## Merge main

### On your working branch: `git merge main`

## Time traveling in git {background-color="#23373B"}

1. Move the `HEAD` somewhere else (moving across commits)
2. Change a file to a state from the past (moving across file versions)
3. Reverting a change (removing a commit)

## You want to uncommit the last thing you did but keep the changes

```bash
git reset --soft HEAD~1
```

. . .

*Back to the staging area!*

## You want to uncommit the last thing you and don't want to keep it

```bash
git reset --hard HEAD~1
```

. . .

*Gone forever!*

## You want to discard uncommited changes 

```bash
git restore file_name
```

or

```bash
git reset --hard
```
. . .

*Gone forever!*


## You forgot to add something to your last commit

```bash
git add thing
git commit --amend --no-edit
```

## You want to undo a specific commit

```bash
git revert COMMIT_ID --no-edit
```

. . . 

`git log --oneline` *is useful to get the hash ID*

## *Your Turn 5*
 
### Restore the version of `report.qmd` from three commits prior using `--source=HEAD~3` in `git restore`
### Check `git status`
### Run `git restore report.qmd`. Which state is it in now? Why?

## Git tags

. . .

Tag a moment in your project's history as important

. . .

`git tag -a aje-submission -m "Initial submission to American Journal of Epidemiology"`

. . .

`git switch aje-submission --detach`


## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit
   branch table1
   checkout table1
   commit
   commit
   commit
   checkout main
   commit
   commit
   commit
   checkout table1
   merge main
   commit
   commit
   commit
   checkout main
   merge table1 tag: "aje_submission"
```


## {.center .middle}

```{mermaid}
%%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'showCommitLabel': false}} }%%
gitGraph
   commit
   commit
   commit
   branch table1
   checkout table1
   commit
   commit
   commit
   checkout main
   commit
   commit
   commit
   checkout table1
   merge main
   commit
   commit
   commit
   checkout main
   merge table1 tag: "aje_submission"
   branch updates
   checkout updates
   commit
   commit
   checkout main
   merge updates tag: "aje_resubmit"
```

## `.gitignore`

. . .

A special file in your repository containing file names, directories, or [patterns](https://git-scm.com/docs/gitignore#_pattern_format)

. . . 

You can also globally ignore common patterns

. . .

You need to do some work to [ignore something retroactively](https://www.atlassian.com/git/tutorials/saving-changes/gitignore#ignoring-a-previously-committed)

## `.gitignore`

```{bash}
#| eval: false
#| filename: ".gitignore"
#| code-line-numbers: "|1|3-4|6-8|10-11"
.DS_Store

data/
/.quarto/

.Rproj.user
.Rhistory
.RData

.ipynb_checkpoints
*/__pycache__
```

## *Git clients* {.large}

GitKraken

GitHub Desktop

Many IDEs

## Resources {background-color="#23373B"}
### [Happy git with R and RStudio](https://happygitwithr.com/): Focused on R but broadly useful
### [Atlassian Git Articles](https://www.atlassian.com/git): Great collection on using git 
### [Dangit, git!](https://dangitgit.com/): A resource that matches what you mutter to yourself in frustration with the right git command
### [Confusing git terminology](https://jvns.ca/blog/2023/11/01/confusing-git-terminology): Git is confusing, and this can help
### [Pro Git](https://git-scm.com/book/en/v2): The ultimate git book 
