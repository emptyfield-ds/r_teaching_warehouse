---
title: "Data Visualization in R"
subtitle: "ggplot2 and the grammar of graphics"
date: "`r Sys.Date()`"
format: "kakashi-revealjs"
---

```{r}
#| label: setup
#| include: false
options(
  tibble.max_extra_cols = 6, 
  tibble.width = 60
)
library(tidyverse)
library(datasauRus)
diabetes <- read_csv("diabetes.csv")
```


```{r}
#| echo: false
knitr::include_graphics("img/ggplot2_masterpiece.png")
```

Art by Allison Horst

---

## Data Visualization with R {background-color="#23373B" .large}

. . .

**ggplot2** works well with the **tidyverse** and is friendly and powerful

. . .

**Better plots** are **better communication**

---

## {background-image="img/tidyhex.png" background-size="contain"}

## ggplot2: Elegant Data Visualizations in R {.large}

![](img/ggplot2.png){.absolute top=0 right=0 width=140}

. . .

*A Layered Grammar of Graphics*

. . .

*Data* is mapped to *aesthetics*; **Statistics** and **plot** are linked

. . .

*Sensible defaults*; **Infinitely extensible**

## Publication quality and beyond

![](img/ggplot2.png){.absolute top=0 right=0 width=140}

### [https://nyti.ms/2jUp36n](https://nyti.ms/2jUp36n)

### [http://bit.ly/2KSGZLu](http://bit.ly/2KSGZLu)

---

```{r}
#| label: slide-10
# print prettily 
as_tibble(mtcars)
```

---

```{r}
#| label: slide-11
#| out.height: 100%
#| out.width: 100%
#| echo: false
knitr::include_graphics("img/new_data_alert_mtcars.png")
```

---

```{r}
#| label: slide-12
#| output-location: fragment
ggplot()
```

---

```{r}
#| label: slide-14
ggplot(mtcars, aes(x = mpg, y = hp))
```

---

```{r}
#| label: slide-15
ggplot(mtcars, aes(x = mpg, y = hp)) +
  geom_point()
```

## `ggplot()`
### `ggplot(data = <data>, mapping = aes(<mapping>)) + `
###  &nbsp;&nbsp; `<geom_function>()`

. . .

Add layers with `+`

. . .

Put `+` at the **end** of a line

. . .

Connect *variables in your dataset* to *aesthetics in the plot* with `aes()`

## *Your Turn 1*

### Read in the `diabetes` data.

### Write and run the code from this slide to make a graph. Pay strict attention to spelling, capitalization, and parentheses!

```{r}
#| label: slide-20
#| eval: false
ggplot(data = diabetes, mapping = aes(x = weight, y = hip)) + 
  geom_point()
```

---

```{r}
#| label: slide-21
diabetes <- read_csv("diabetes.csv")
ggplot(data = diabetes, mapping = aes(x = weight, y = hip)) + 
  geom_point()
```

## Aesthetics: `aes()`

### `ggplot(data = <data>, mapping = aes(<mapping>)) + `
###  &nbsp;&nbsp; `<geom_function>()`
 
. . .

Aesthetics *map* the data to the plot
 
## Aesthetics: `aes()`

```{r}
#| label: slide-23
#| eval: false
ggplot(mtcars, aes(x = mpg, y = hp, color = cyl)) + geom_point()

ggplot(mtcars, aes(x = mpg, y = hp, size = cyl)) + geom_point()

ggplot(mtcars, aes(x = mpg, y = hp, alpha = cyl)) + geom_point()

ggplot(mtcars, aes(x = mpg, y = hp, shape = cyl)) + geom_point()
```

## *Your Turn 2*

### Add `color`, `size`, `alpha`, and `shape` aesthetics to your graph using the `gender` variable. Experiment.  

```{r}
#| label: slide-24
#| eval: false
ggplot(
  data = diabetes, 
  mapping = aes(x = weight, y = hip)
) +
  geom_point()
```

### Try moving the mapping argument to `geom_point()`. Add in any aesthetics you found helpful.

---

```{r}
#| label: slide-25
#| code-line-numbers: "3"
ggplot(
  data = diabetes, 
  mapping = aes(x = weight, y = hip, color = gender)
) +
  geom_point()
```

---

```{r}
#| label: slide-26
#| code-line-numbers: "3"
ggplot(
  data = diabetes, 
  mapping = aes(x = weight, y = hip, size = gender)
) +
  geom_point()
```

---

```{r}
#| label: slide-27
#| code-line-numbers: "3"
ggplot(
  data = diabetes, 
  mapping = aes(x = weight, y = hip, alpha = gender)
) +
  geom_point()
```

---

```{r}
#| label: slide-28
#| code-line-numbers: "3"
ggplot(
  data = diabetes, 
  mapping = aes(x = weight, y = hip, shape = gender)
) +
  geom_point()
```

---

```{r}
#| label: slide-29-a
#| out.height: 90%
#| out.width: 90%
#| output-location: slide
#| code-line-numbers: "|6,7"
ggplot(data = diabetes) +
  geom_point(
    mapping = aes(
      x = weight, 
      y = hip, 
      color = gender, 
      shape = gender
    )
  )
```
---

## geoms: the shape of the data

```{r}
#| code-line-numbers: "9"
#| output-location: column
#| out.width: "100%"
ggplot(
  mtcars, 
  aes(
    x = factor(am), 
    y = mpg, 
    color = factor(am)
  )
) +
  geom_point()
```

## geoms: the shape of the data

```{r}
#| code-line-numbers: "9"
#| output-location: column
#| out.width: "100%"
ggplot(
  mtcars, 
  aes(
    x = factor(am), 
    y = mpg, 
    fill = factor(am)
  )
) +
  geom_violin()
```

## geoms: the shape of the data

```{r}
#| code-line-numbers: "9"
#| output-location: column
#| out.width: "100%"
ggplot(
  mtcars, 
  aes(
    x = hp, 
    y = mpg, 
    color = factor(am)
  )
) +
  geom_smooth()
```

## geoms: the shape of the data

```{r}
#| echo: false
#| out.width: 100%
knitr::include_graphics("img/cheatsheet-geoms.png")
```

## *Your Turn 3*

### Replace this scatterplot with one that draws boxplots. 

```{r}
#| label: slide-31
#| eval: false
ggplot(diabetes, aes(gender, chol)) + geom_point()
```

---

```{r}
#| label: slide-32
ggplot(diabetes, aes(gender, chol)) + geom_boxplot()
```

## *Your Turn 4*

### 1. Make a histogram of the `glyhb` variable in `diabetes`.
### 2. Redo the `glyhb` plot as a density plot.

---

```{r}
#| label: slide-34
ggplot(diabetes, aes(x = glyhb)) + 
  geom_histogram()
```

---

```{r}
#| label: slide-35
ggplot(diabetes, aes(x = glyhb)) + 
  geom_density()
```

---

```{r}
#| label: slide-36
diabetes |> 
  ggplot(aes(x = frame)) + 
  geom_bar()
```

---

```{r}
#| label: slide-37
#| code-line-numbers: "|2"
diabetes |> 
  drop_na() |> 
  ggplot(aes(x = frame)) + 
  geom_bar()
```

---

## *Your Turn 5*

### Make a bar chart of `frame` colored by `gender`. Then, try it with the `fill` aesthetic instead of `color`.

```{r}
#| label: slide-38
#| eval: false
diabetes |> 
  drop_na() |> 
  ______() + 
  ______()
```

---

```{r}
#| label: slide-39
diabetes |> 
  drop_na() |> 
  ggplot(aes(x = frame, fill = gender)) + 
  geom_bar()
```

---

## Positions {.extra-large}

### `geom_bar(position = "<POSITION>")`

. . .

When we have aesthetics mapped, how are they positioned?

. . .

*geom_bar*: **dodge**, **fill**, **stacked** (default)

. . .

*geom_point*: **jitter**

---

```{r}
#| label: slide-41
ggplot(mtcars, aes(x = factor(am), y = hp)) + 
  geom_point()
```

---

```{r}
#| label: slide-42
#| code-line-numbers: "2"
ggplot(mtcars, aes(x = factor(am), y = hp)) + 
  geom_point(position = "jitter") 
```

---

```{r}
#| label: slide-43
#| code-line-numbers: "2"
ggplot(mtcars, aes(x = factor(am), y = hp)) + 
  geom_jitter(width = .1, height = 0) 
```

## *Your Turn 6*

### Take your code for the bar chart before (using the `fill` aesthetic). Experiment with different `position` values: `"dodge"`, `"fill"`, `"stack"`

---

```{r}
#| label: slide-45
diabetes |> 
  drop_na() |> 
  ggplot(aes(x = frame, fill = gender)) + 
  geom_bar(position = "stack")
```

---

```{r}
#| label: slide-46
diabetes |> 
  drop_na() |> 
  ggplot(aes(x = frame, fill = gender)) + 
  geom_bar(position = "dodge")
```

---

```{r}
#| label: slide-47
diabetes |> 
  drop_na() |> 
  ggplot(aes(x = frame, fill = gender)) + 
  geom_bar(position = "fill")
```

## Mapping vs setting {.large}

Cool, but how do I just make everything *blue*?

. . .

`geom_point(aes(x, y), color = "blue")`
`geom_bar(aes(x, y), fill = "blue")`

. . .

To set a color, put it **outside** `aes()`

---

```{r}
#| label: slide-49
#| code-line-numbers: "|2"
ggplot(mtcars, aes(x = mpg, y = hp, color = cyl)) + 
  geom_point(color = "blue")
```

---

```{r}
#| label: slide-50
#| code-line-numbers: "2"
ggplot(mtcars, aes(x = mpg, y = hp, color = cyl)) + 
  geom_point(aes(color = "blue"))
```

---

```{r}
#| label: slide-51
#| code-line-numbers: "|2"
ggplot(mtcars, aes(x = cyl)) + 
  geom_bar(color = "steelblue")
```

---

```{r}
#| label: slide-52
#| code-line-numbers: "2"
ggplot(mtcars, aes(x = cyl)) + 
  geom_bar(fill = "steelblue")
```

---

```{r}
#| label: slide-53
#| code-line-numbers: "2"
ggplot(mtcars, aes(x = cyl)) + 
  geom_bar(color = "firebrick", fill = "steelblue")
```

## Adding layers

```{r}
#| label: slide-54
#| eval: false
ggplot(data = <DATA>, mapping = aes(<MAPPINGS>)) +
  <GEOM_FUNCTION>() +
  <GEOM_FUNCTION>() +
  <SCALE_FUNCTION>() + 
  <THEME_FUNCTION>()
```

## *Your Turn 7* {.small}

### Run the code after every change you make.

#### 1. Predict what this code will do. Then run it.  
#### 2. Add a `linetype` aesthetic for `gender`. Run it again.  
#### 3. Set the color of `geom_smooth()` to "black"  
#### 4. Add `se = FALSE` to the `geom_smooth()`  
#### 5. It's hard to see the lines well now. How about setting `alpha = .2` in `geom_point()`?  
#### 6. Jitter the points. You can either change the geom or change the `position` argument.  
#### 7. Add another layer, `theme_bw()`. Remember to use `+`.  

```{r}
#| label: slide-55
#| eval: false
ggplot(diabetes, aes(weight, hip)) + 
  geom_point() +
  geom_smooth()
```

## {.small}

```{r}
#| label: slide-56
ggplot(diabetes, aes(weight, hip)) + 
  geom_point() +
  geom_smooth()
```

## {.small}

```{r}
#| label: slide-57
ggplot(diabetes, aes(weight, hip)) + 
  geom_point() +
  geom_smooth(aes(linetype = gender))
```

## {.small}

```{r}
#| label: slide-58
ggplot(diabetes, aes(weight, hip)) + 
  geom_point() +
  geom_smooth(aes(linetype = gender), color = "black")
```

## {.small}

```{r}
#| label: slide-59
ggplot(diabetes, aes(weight, hip)) + 
  geom_point() +
  geom_smooth(aes(linetype = gender), color = "black", se = FALSE)
```

## {.small}

```{r}
#| label: slide-60
ggplot(diabetes, aes(weight, hip)) + 
  geom_point(alpha = .2) +
  geom_smooth(aes(linetype = gender), color = "black", se = FALSE)
```

## {.small}

```{r}
#| label: slide-61
ggplot(diabetes, aes(weight, hip)) + 
  geom_jitter(alpha = .2) +
  geom_smooth(aes(linetype = gender), color = "black", se = FALSE)
```

## {.small}

```{r}
#| label: slide-62
ggplot(diabetes, aes(weight, hip)) + 
  geom_jitter(alpha = .2) +
  geom_smooth(aes(linetype = gender), color = "black", se = FALSE) +
  theme_bw()
```

## Facets {.large}

Easily split your plot into panels

. . .

`facet_grid()`

`facet_wrap()`

. . .

`facet_grid(`**`rows = vars(x)`**`,` **`cols = vars(y)`**`)`

`facet_wrap(`**`vars(x)`**`)`

---

```{r}
#| code-line-numbers: "|4"
#| output-location: fragment
diamonds |> 
  ggplot(aes(x = carat, y = price)) + 
  geom_point() + 
  facet_grid(rows = vars(cut), cols = vars(clarity)) 
```

## *Your Turn 8*

### Use a facet grid by `gender` and `location`

```{r}
#| eval: false
ggplot(diabetes, aes(weight, hip)) + 
  geom_point() +
  geom_smooth()
```

---

```{r}
#| code-line-numbers: "4"
ggplot(diabetes, aes(weight, hip)) + 
  geom_point() +
  geom_smooth() + 
  facet_grid(rows = vars(gender), cols = vars(location))
```

## `facet_wrap()`

```{r}
#| code-line-numbers: "|4"
#| output-location: slide
diamonds |> 
  ggplot(aes(x = carat, y = price)) + 
  geom_point() + 
  facet_wrap(vars(clarity))
```

## datasauRus

```{r}
library(datasauRus)
datasaurus_dozen 
```

---

```{r}
#| out.width: 100%
#| echo: false
knitr::include_graphics("img/new_data_alert_datasaurus.png")
```

## *Your Turn 9: Challenge!* {.small}

### 1. Load the `datasauRus` package. This package includes a data set called `datasaurus_dozen`.
### 2. Use dplyr to summarize the correlation between `x` and `y`. First, group it by `dataset`, and then summarize with the `cor()`  function. Call the new variable `corr`. What's it look like?
### 3. Mutate `corr`. Round it to 2 digits. Then, mutate it again (or wrap it around your first change) using: `paste("corr:", corr)`
### 4. Save the summary data frame as `corrs`.
### 5. Pass `datasaurus_dozen` to `ggplot()` and add a point geom
### 6. Use a facet (wrap) for `dataset`.
### 7. Add a text geom. For this geom, set `data = corrs`. You also need to use `aes()` in this call to set `label = corr`, `x = 50`, and `y = 110`.

---

```{r}
#| code-line-numbers: "|2|3|5,6"
corrs <- datasaurus_dozen |> 
  group_by(dataset) |> 
  summarize(corr = cor(x, y)) |> 
  mutate(
    corr = round(corr, 2),
    corr = paste("corr:", corr)
  )
```

---

```{r}
corrs
```

---

```{r}
#| code-line-numbers: "|4|5"
#| output-location: slide
#| fig.width: 12
#| out.width: "100%"
datasaurus_dozen |> 
  ggplot(aes(x, y)) + 
  geom_point() + 
  geom_text(data = corrs, aes(label = corr, x = 50, y = 110)) +
  facet_wrap(vars(dataset))
```

